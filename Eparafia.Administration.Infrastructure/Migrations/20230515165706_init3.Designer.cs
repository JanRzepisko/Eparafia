// <auto-generated />
using System;
using Eparafia.Administration.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eparafia.Administration.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230515165706_init3")]
    partial class init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BaptismDate")
                        .HasColumnType("date");

                    b.Property<Guid>("BaptismRegisterId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BaptismRegisterId")
                        .IsUnique();

                    b.ToTable("_baptismClient");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismFather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaptismParentsRelationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Confession")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BaptismParentsRelationId")
                        .IsUnique();

                    b.ToTable("_baptismFather");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismGodfather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaptismRegisterId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Confession")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BaptismRegisterId")
                        .IsUnique();

                    b.ToTable("_baptismGodfather");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismGodmother", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaptismRegisterId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Confession")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BaptismRegisterId")
                        .IsUnique();

                    b.ToTable("_baptismGodmother");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismMother", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaptismParentsRelationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CityOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Confession")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BaptismParentsRelationId")
                        .IsUnique();

                    b.ToTable("_baptismMother");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismParentsRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BaptismRegisterId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FatherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MotherId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ParentRelation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaptismRegisterId")
                        .IsUnique();

                    b.ToTable("_baptismParentsRelation");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActIdId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfSacrament")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GodfatherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GodmotherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParishId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SacramentalMakerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ActIdId");

                    b.HasIndex("ParishId");

                    b.HasIndex("SacramentalMakerId");

                    b.ToTable("_baptismRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Dead.DeadClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<Guid>("DeadRegisterId")
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("DeathDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DeadRegisterId")
                        .IsUnique();

                    b.ToTable("_deadClient");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Dead.DeadRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfSacrament")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ParishId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SacramentalMakerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.HasIndex("SacramentalMakerId");

                    b.ToTable("_deadRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Parish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CallName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("_parish");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.ParishRecord.HomeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParishId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.ToTable("_homeRecord");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.ParishRecord.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("HomeRecordId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("HomeRecordId");

                    b.ToTable("_person");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Priest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParishId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.ToTable("_priest");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.SacramentalMaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("_sacramentalMaker");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.Men", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingRegisterId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingRegisterId")
                        .IsUnique();

                    b.ToTable("_weddingMen");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.WeddingRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfSacrament")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MenId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParishId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SacramentalMakerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WomenId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParishId");

                    b.HasIndex("SacramentalMakerId");

                    b.ToTable("_weddingRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.Witness", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingRegisterId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingRegisterId");

                    b.ToTable("_weddingWitness");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.Women", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WeddingRegisterId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WeddingRegisterId")
                        .IsUnique();

                    b.ToTable("_weddingWomen");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.ValueObjects.ActId", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ActId");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismClient", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", "BaptismRegister")
                        .WithOne("Client")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismClient", "BaptismRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaptismRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismFather", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismParentsRelation", "BaptismParentsRelation")
                        .WithOne("Father")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismFather", "BaptismParentsRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Eparafia.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BaptismFatherId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("BaptismFatherId");

                            b1.ToTable("_baptismFather");

                            b1.WithOwner()
                                .HasForeignKey("BaptismFatherId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BaptismParentsRelation");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismGodfather", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", "BaptismRegister")
                        .WithOne("Godfather")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismGodfather", "BaptismRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Eparafia.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BaptismGodfatherId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("BaptismGodfatherId");

                            b1.ToTable("_baptismGodfather");

                            b1.WithOwner()
                                .HasForeignKey("BaptismGodfatherId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BaptismRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismGodmother", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", "BaptismRegister")
                        .WithOne("Godmother")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismGodmother", "BaptismRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Eparafia.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BaptismGodmotherId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("BaptismGodmotherId");

                            b1.ToTable("_baptismGodmother");

                            b1.WithOwner()
                                .HasForeignKey("BaptismGodmotherId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BaptismRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismMother", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismParentsRelation", "BaptismParentsRelation")
                        .WithOne("Mother")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismMother", "BaptismParentsRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Eparafia.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BaptismMotherId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("BaptismMotherId");

                            b1.ToTable("_baptismMother");

                            b1.WithOwner()
                                .HasForeignKey("BaptismMotherId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("BaptismParentsRelation");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismParentsRelation", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", "BaptismRegister")
                        .WithOne("Parents")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismParentsRelation", "BaptismRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaptismRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.ValueObjects.ActId", "ActId")
                        .WithMany()
                        .HasForeignKey("ActIdId");

                    b.HasOne("Eparafia.Administration.Domain.Entities.Parish", "Parish")
                        .WithMany("BaptismRegisters")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eparafia.Administration.Domain.Entities.SacramentalMaker", "SacramentalMaker")
                        .WithMany("BaptismRegisters")
                        .HasForeignKey("SacramentalMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActId");

                    b.Navigation("Parish");

                    b.Navigation("SacramentalMaker");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Dead.DeadClient", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.Dead.DeadRegister", "DeadRegister")
                        .WithOne("Client")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.Dead.DeadClient", "DeadRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeadRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Dead.DeadRegister", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.Parish", "Parish")
                        .WithMany("DeadRegisters")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eparafia.Administration.Domain.Entities.SacramentalMaker", "SacramentalMaker")
                        .WithMany("DeadRegisters")
                        .HasForeignKey("SacramentalMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parish");

                    b.Navigation("SacramentalMaker");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.ParishRecord.HomeRecord", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.Parish", "Parish")
                        .WithMany("HomeRecords")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Eparafia.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("HomeRecordId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("BuildingNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("HomeRecordId");

                            b1.ToTable("_homeRecord");

                            b1.WithOwner()
                                .HasForeignKey("HomeRecordId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Parish");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.ParishRecord.Person", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.ParishRecord.HomeRecord", "HomeRecord")
                        .WithMany("Persons")
                        .HasForeignKey("HomeRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeRecord");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Priest", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.Parish", "Parish")
                        .WithMany("Priests")
                        .HasForeignKey("ParishId");

                    b.Navigation("Parish");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.Men", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.WeddingEntities.WeddingRegister", "WeddingRegister")
                        .WithOne("Men")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.WeddingEntities.Men", "WeddingRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.WeddingRegister", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.Parish", "Parish")
                        .WithMany("WeddingRegisters")
                        .HasForeignKey("ParishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eparafia.Administration.Domain.Entities.SacramentalMaker", "SacramentalMaker")
                        .WithMany("WeddingRegisters")
                        .HasForeignKey("SacramentalMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parish");

                    b.Navigation("SacramentalMaker");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.Witness", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.WeddingEntities.WeddingRegister", "WeddingRegister")
                        .WithMany("Witnesses")
                        .HasForeignKey("WeddingRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.Women", b =>
                {
                    b.HasOne("Eparafia.Administration.Domain.Entities.WeddingEntities.WeddingRegister", "WeddingRegister")
                        .WithOne("Women")
                        .HasForeignKey("Eparafia.Administration.Domain.Entities.WeddingEntities.Women", "WeddingRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeddingRegister");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismParentsRelation", b =>
                {
                    b.Navigation("Father")
                        .IsRequired();

                    b.Navigation("Mother")
                        .IsRequired();
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.BaptismEntities.BaptismRegister", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("Godfather")
                        .IsRequired();

                    b.Navigation("Godmother")
                        .IsRequired();

                    b.Navigation("Parents")
                        .IsRequired();
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Dead.DeadRegister", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.Parish", b =>
                {
                    b.Navigation("BaptismRegisters");

                    b.Navigation("DeadRegisters");

                    b.Navigation("HomeRecords");

                    b.Navigation("Priests");

                    b.Navigation("WeddingRegisters");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.ParishRecord.HomeRecord", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.SacramentalMaker", b =>
                {
                    b.Navigation("BaptismRegisters");

                    b.Navigation("DeadRegisters");

                    b.Navigation("WeddingRegisters");
                });

            modelBuilder.Entity("Eparafia.Administration.Domain.Entities.WeddingEntities.WeddingRegister", b =>
                {
                    b.Navigation("Men")
                        .IsRequired();

                    b.Navigation("Witnesses");

                    b.Navigation("Women")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
